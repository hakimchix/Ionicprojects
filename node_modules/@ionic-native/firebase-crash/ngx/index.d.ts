import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name FirebaseCrash
 * @description
 * This plugin brings crash reporting from Google Firebase to your Cordova project! Android and iOS supported.
 *
 * @usage
 * ```typescript
 * import { FirebaseCrash } from '@ionic-native/firebase-crash';
 *
 * constructor(private firebaseCrash: FirebaseCrash) { }
 *
 * ...
 *
 * this.firebaseCrash.setUserId('123456789');
 * this.firebaseCrash.log('message');
 * this.firebaseCrash.logError('non fatal exception');
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class FirebaseCrash extends IonicNativePlugin {
    /**
     * Add logging that will be sent with your crash data in case of app crash.
     * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#add_custom_logs
     * @param {string} message
     * @return {Promise<any>}
     */
    log(message: string): Promise<any>;
    /**
     * Log non-fatal exceptions in addition to automatically reported app crashes.
     * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#log_non-fatal_exceptions
     * @param {string} message
     * @return {Promise<any>}
     */
    logError(message: string): Promise<any>;
    /**
     * Sets the user identifier property for crashlytics reporting.
     * https://firebase.google.com/docs/crashlytics/customize-crash-reports?authuser=0#set_user_ids
     * @param {string} userId value to set the userId
     * @returns {Promise<any>}
     */
    setUserId(userId: string): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FirebaseCrash, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FirebaseCrash>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbi8qKlxuICogQG5hbWUgRmlyZWJhc2VDcmFzaFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBicmluZ3MgY3Jhc2ggcmVwb3J0aW5nIGZyb20gR29vZ2xlIEZpcmViYXNlIHRvIHlvdXIgQ29yZG92YSBwcm9qZWN0ISBBbmRyb2lkIGFuZCBpT1Mgc3VwcG9ydGVkLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmlyZWJhc2VDcmFzaCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlyZWJhc2UtY3Jhc2gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VDcmFzaDogRmlyZWJhc2VDcmFzaCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5maXJlYmFzZUNyYXNoLnNldFVzZXJJZCgnMTIzNDU2Nzg5Jyk7XG4gKiB0aGlzLmZpcmViYXNlQ3Jhc2gubG9nKCdtZXNzYWdlJyk7XG4gKiB0aGlzLmZpcmViYXNlQ3Jhc2gubG9nRXJyb3IoJ25vbiBmYXRhbCBleGNlcHRpb24nKTtcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlyZWJhc2VDcmFzaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBBZGQgbG9nZ2luZyB0aGF0IHdpbGwgYmUgc2VudCB3aXRoIHlvdXIgY3Jhc2ggZGF0YSBpbiBjYXNlIG9mIGFwcCBjcmFzaC5cbiAgICAgKiBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9jcmFzaGx5dGljcy9jdXN0b21pemUtY3Jhc2gtcmVwb3J0cz9hdXRodXNlcj0wI2FkZF9jdXN0b21fbG9nc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogTG9nIG5vbi1mYXRhbCBleGNlcHRpb25zIGluIGFkZGl0aW9uIHRvIGF1dG9tYXRpY2FsbHkgcmVwb3J0ZWQgYXBwIGNyYXNoZXMuXG4gICAgICogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvY3Jhc2hseXRpY3MvY3VzdG9taXplLWNyYXNoLXJlcG9ydHM/YXV0aHVzZXI9MCNsb2dfbm9uLWZhdGFsX2V4Y2VwdGlvbnNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBsb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdXNlciBpZGVudGlmaWVyIHByb3BlcnR5IGZvciBjcmFzaGx5dGljcyByZXBvcnRpbmcuXG4gICAgICogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvY3Jhc2hseXRpY3MvY3VzdG9taXplLWNyYXNoLXJlcG9ydHM/YXV0aHVzZXI9MCNzZXRfdXNlcl9pZHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIHZhbHVlIHRvIHNldCB0aGUgdXNlcklkXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzZXRVc2VySWQodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG59XG4iXX0=