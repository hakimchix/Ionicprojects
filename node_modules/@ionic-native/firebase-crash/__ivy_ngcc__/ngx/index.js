import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var FirebaseCrash = /** @class */ (function (_super) {
    __extends(FirebaseCrash, _super);
    function FirebaseCrash() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseCrash.prototype.log = function (message) { return cordova(this, "log", { "sync": true }, arguments); };
    FirebaseCrash.prototype.logError = function (message) { return cordova(this, "logError", { "sync": true }, arguments); };
    FirebaseCrash.prototype.setUserId = function (userId) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    FirebaseCrash.pluginName = "FirebaseCrash";
    FirebaseCrash.plugin = "cordova-plugin-firebase-crash";
    FirebaseCrash.pluginRef = "cordova.plugins.firebase.crashlytics";
    FirebaseCrash.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-crash";
    FirebaseCrash.platforms = ["Android", "iOS"];
FirebaseCrash.ɵfac = function FirebaseCrash_Factory(t) { return ɵFirebaseCrash_BaseFactory(t || FirebaseCrash); };
FirebaseCrash.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FirebaseCrash, factory: function (t) { return FirebaseCrash.ɵfac(t); } });
var ɵFirebaseCrash_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FirebaseCrash);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirebaseCrash, [{
        type: Injectable
    }], null, null); })();
    return FirebaseCrash;
}(IonicNativePlugin));
export { FirebaseCrash };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZmlyZWJhc2UtY3Jhc2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBSVcsSUF3QndCLGlDQUFpQjtBQUFDO0FBRTlCO0FBQ0w7QUFBTSxJQUt0QiwyQkFBRyxhQUFDLE9BQWU7QUFLRyxJQU10QixnQ0FBUSxhQUFDLE9BQWU7QUFLRyxJQU0zQixpQ0FBUyxhQUFDLE1BQWM7QUFJUztBQUFnRDtBQUE0RDtBQUFzRTtBQUF3RjtJQWxDaFMsYUFBYSx3QkFEekIsVUFBVSxFQUFFLFFBQ0EsYUFBYTs7Ozs7MEJBQUU7QUFBQyx3QkE5QjdCO0FBQUUsRUE4QmlDLGlCQUFpQjtBQUNuRCxTQURZLGFBQWE7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEZpcmViYXNlQ3Jhc2hcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gYnJpbmdzIGNyYXNoIHJlcG9ydGluZyBmcm9tIEdvb2dsZSBGaXJlYmFzZSB0byB5b3VyIENvcmRvdmEgcHJvamVjdCEgQW5kcm9pZCBhbmQgaU9TIHN1cHBvcnRlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZpcmViYXNlQ3Jhc2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLWNyYXNoJztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlQ3Jhc2g6IEZpcmViYXNlQ3Jhc2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuZmlyZWJhc2VDcmFzaC5zZXRVc2VySWQoJzEyMzQ1Njc4OScpO1xuICogdGhpcy5maXJlYmFzZUNyYXNoLmxvZygnbWVzc2FnZScpO1xuICogdGhpcy5maXJlYmFzZUNyYXNoLmxvZ0Vycm9yKCdub24gZmF0YWwgZXhjZXB0aW9uJyk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRmlyZWJhc2VDcmFzaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWNyYXNoJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmZpcmViYXNlLmNyYXNobHl0aWNzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWNyYXNoJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpcmViYXNlQ3Jhc2ggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBBZGQgbG9nZ2luZyB0aGF0IHdpbGwgYmUgc2VudCB3aXRoIHlvdXIgY3Jhc2ggZGF0YSBpbiBjYXNlIG9mIGFwcCBjcmFzaC5cbiAgICogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvY3Jhc2hseXRpY3MvY3VzdG9taXplLWNyYXNoLXJlcG9ydHM/YXV0aHVzZXI9MCNhZGRfY3VzdG9tX2xvZ3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGxvZyhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgbm9uLWZhdGFsIGV4Y2VwdGlvbnMgaW4gYWRkaXRpb24gdG8gYXV0b21hdGljYWxseSByZXBvcnRlZCBhcHAgY3Jhc2hlcy5cbiAgICogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvY3Jhc2hseXRpY3MvY3VzdG9taXplLWNyYXNoLXJlcG9ydHM/YXV0aHVzZXI9MCNsb2dfbm9uLWZhdGFsX2V4Y2VwdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGxvZ0Vycm9yKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVzZXIgaWRlbnRpZmllciBwcm9wZXJ0eSBmb3IgY3Jhc2hseXRpY3MgcmVwb3J0aW5nLlxuICAgKiBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9jcmFzaGx5dGljcy9jdXN0b21pemUtY3Jhc2gtcmVwb3J0cz9hdXRodXNlcj0wI3NldF91c2VyX2lkc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIHZhbHVlIHRvIHNldCB0aGUgdXNlcklkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc2V0VXNlcklkKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==