{"version":3,"sources":["webpack:///src/app/tasks/tasks.page.html","webpack:///src/app/task.service.ts","webpack:///src/app/tasks/tasks-routing.module.ts","webpack:///src/app/tasks/tasks.module.ts","webpack:///src/app/tasks/tasks.page.scss","webpack:///src/app/tasks/tasks.page.ts"],"names":["TaskService","afAuth","afs","tasksCollection","collection","tasks","snapshotChanges","pipe","actions","map","a","data","payload","doc","id","d","filter","closed","valueChanges","task","update","add","providedIn","routes","path","component","TasksPageRoutingModule","imports","forChild","exports","TasksPageModule","declarations","TasksPage","todoService","getopenTasks","subscribe","res","todos","getTasks","i","item","closeTask","openTask","removeTask","selector","template"],"mappings":"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","file":"tasks-tasks-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar> <ion-back-button text=\\\"Home\\\" defaultHref=\\\"home\\\"></ion-back-button>\\n    <ion-title>tasks</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-button color=\\\"success\\\"  (click)=\\\"gettasks()\\\">get  all tasks</ion-button>\\n  <ion-button color=\\\"primary\\\" (click)=\\\"getopentask(false)\\\">get opened tasks</ion-button>\\n  <ion-button color=\\\"primary\\\" (click)=\\\"getopentask(true)\\\">get close tasks</ion-button>\\n  \\n  <ion-list>\\n \\n    <ng-container *ngIf=\\\"!todos || todos.length == 0\\\">\\n      <div *ngFor=\\\"let n of [0,1,2]\\\" padding>\\n        <ion-skeleton-text>{{n}}</ion-skeleton-text>\\n        <p>\\n          <ion-skeleton-text class=\\\"fake-skeleton\\\"></ion-skeleton-text>\\n        </p>\\n      </div>\\n    </ng-container>\\n \\n    <ion-item-sliding *ngFor=\\\"let item of todos\\\">\\n      <ion-item [color]=\\\" priority_color(item.priority)\\\" lines=\\\"inset\\\" button [routerLink]=\\\"['/task-detail', item.id]\\\">\\n      <ion-note>Task Name</ion-note>  <ion-label>\\n          {{ item.task}}    </ion-label> <ion-label>\\n            <ion-note>date :</ion-note>\\n\\n          <p>{{ item.createdAt | date:'short' }}</p>\\n        </ion-label>\\n        <ion-note color=\\\"primary\\\">priority:</ion-note>\\n        {{ item.priority }}\\n        <ion-item  [color]=\\\" priority_color(item.priority)\\\" slot=\\\"start\\\">\\n          <ion-note>colsed</ion-note>\\n        <ion-checkbox [(ngModel)]=\\\"item.closed\\\"> </ion-checkbox>\\n      </ion-item>\\n      </ion-item>\\n    <ion-item>\\n      <ion-item>\\n      \\n      </ion-item>\\n        \\n        </ion-item>\\n       \\n      <ion-item-options >\\n         \\n        <ion-item-option  (click)=\\\"remove(item.id)\\\" color=\\\"danger\\\" expandable=true>\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n          \\n        </ion-item-option>\\n        \\n      </ion-item-options>\\n      <ion-item-options side=\\\"start\\\">\\n        <ion-item-option (click)=\\\"close(item)\\\"  color=\\\"success\\\" expandable=true type=\\\"button\\\">\\n        Close\\n        </ion-item-option>\\n          <ion-item-option (click)=\\\"open(item)\\\"  color=\\\"danger\\\"  expandable=true type=\\\"button\\\">\\n           Open\\n        </ion-item-option>\\n      </ion-item-options>\\n    </ion-item-sliding>\\n \\n  </ion-list>\\n \\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button routerLink=\\\"/task-detail\\\" routerDirection=\\\"forward\\\">\\n      <ion-icon name=\\\"add\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n \\n\\n</ion-content>\\n\";","import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from 'angularfire2/firestore';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { AngularFireAuth } from '@angular/fire/auth';\n\nexport interface Task {\n  id?: string;\n  task: string;\n  priority: number;\n  createdAt: number;\n  closedAt:any;\n  closed:boolean;\n\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private tasksCollection: AngularFirestoreCollection<Task>;\n \n   tasks: Observable<Task[]>;\n\n  constructor(public afAuth: AngularFireAuth, afs: AngularFirestore) {\n    this.tasksCollection=afs.collection('tasks');\n    \n \n    this.tasks = this.tasksCollection.snapshotChanges().pipe(\n      map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return { id, ...data };\n        })\n      })\n    );\n  }\n   getTasks() {\n    return this.tasks\n  }\n  getopenTasks(d) {\n   \n    \n \n    return this.tasksCollection.snapshotChanges().pipe(\n      map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return { id, ...data };\n        }).filter(a=>a.closed===d);\n      })\n    );\n  }\n  getTask(id) {\n    return this.tasksCollection.doc<Task>(id).valueChanges();\n  }\n  closeTask(task: Task, id: string) {\n    task.closed=true;\n    return this.tasksCollection.doc(id).update(task);\n  }\n  openTask(task: Task, id: string) {\n    task.closed=false;\n    return this.tasksCollection.doc(id).update(task);\n  }\n  updateTask(task: Task, id: string) {\n    return this.tasksCollection.doc(id).update(task);\n  }\n  /*addTaskToFirebase() {\n    this.db.list('Tasks/').push({\n      text: 'this.myTask',\n      date: new Date().toISOString(),\n      checked: false\n    });\n    this.showForm();\n  }*/\n  addTask(task: Task) {\n    return this.tasksCollection.add(task);\n  }\n \n  removeTask(id) {\n    return this.tasksCollection.doc(id).delete();\n  }\n   }\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TasksPage } from './tasks.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TasksPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TasksPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Task, TaskService } from '../task.service'\nimport { IonicModule } from '@ionic/angular';\nimport { AngularFirestore, AngularFirestoreCollection } from 'angularfire2/firestore';\nimport { TasksPageRoutingModule } from './tasks-routing.module';\n\nimport { TasksPage } from './tasks.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TasksPageRoutingModule,AngularFirestore,AngularFirestoreCollection,TaskService\n  ],\n  declarations: [TasksPage]\n})\nexport class TasksPageModule {}\n","export default \".fake-skeleton {\\n  width: 60%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGFza3MvQzpcXFVzZXJzXFxhY2hpZ1xcaW9uaWNfcHJqXFxmaXJlYmFzZS1hdXRoZW50aWNhdGlvbnJcXGlvbmljNS1maXJlYmFzZS9zcmNcXGFwcFxcdGFza3NcXHRhc2tzLnBhZ2Uuc2NzcyIsInNyYy9hcHAvdGFza3MvdGFza3MucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0ksVUFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvdGFza3MvdGFza3MucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5mYWtlLXNrZWxldG9uIHtcclxuICAgIHdpZHRoOiA2MCU7XHJcbn1cclxuIiwiLmZha2Utc2tlbGV0b24ge1xuICB3aWR0aDogNjAlO1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection } from 'angularfire2/firestore';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { Task, TaskService } from '../task.service'\nimport { AngularFireAuth } from '@angular/fire/auth';\n\n\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.page.html',\n  styleUrls: ['./tasks.page.scss'],\n})\nexport class TasksPage  implements OnInit  {\n  todos: Task[];\n\n \n  constructor (     private todoService: TaskService ) { \n    \n  }\n  async getopentask(d){\n    this.todoService.getopenTasks(d).subscribe(res =>{ this.todos =res;});\n   \n  }\n  async gettasks() {this.todoService.getTasks().subscribe(res => {\n    this.todos = res;\n  });\n  }\n\n  priority_color(i){\n\nswitch(i) { \n  case 1: { \n    \n    return \"danger\";\n    break; \n }\n  case 2: { \n     //statements; \n     return \"primary\";\n     break; \n  } \n  case 3: { \n     //statements; \n     return \"light\";\n     break; \n  } \n  default: { \n     //statements; \n     return \"dark\";\n     break; \n  } \n} \n  }\n\n  ngOnInit() {\n    \n  }\n  close(item) {\n    this.todoService.closeTask(item,item.id);\n   }\n   open(item) {\n    this.todoService.openTask(item,item.id);\n   }\n  remove(item) {\n   this.todoService.removeTask(item);\n  }\n}\n"]}