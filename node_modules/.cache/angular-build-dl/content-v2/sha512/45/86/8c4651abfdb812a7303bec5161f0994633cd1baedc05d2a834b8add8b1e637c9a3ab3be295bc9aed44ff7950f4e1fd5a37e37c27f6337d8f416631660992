{"version":3,"sources":["webpack:///node_modules/@angular/fire/__ivy_ngcc__/fesm2015/angular-fire-firestore.js"],"names":["_fromRef","ref","scheduler","subscriber","unsubscribe","schedule","onSnapshot","fromRef","fromDocRef","pipe","payload","type","fromCollectionRef","docChanges","query","action","map","change","sortedChanges","events","changes","current","combineChanges","c","forEach","indexOf","combineChange","combined","newIndex","doc","isEqual","splice","oldIndex","validateEventsArray","length","AngularFirestoreCollection","afs","schedulers","outsideAngular","keepUnstableUntilFirst","actions","filter","stateChanges","validatedEvents","scheduledSortedChanges$","options","docs","a","idField","Object","assign","data","id","get","insideAngular","add","path","AngularFirestoreDocument","set","update","queryFn","collectionRef","collection","associateQuery","scheduledFromDocRef$","snapshotChanges","AngularFirestoreCollectionGroup","fromCollectionRefScheduled$","ENABLE_PERSISTENCE","PERSISTENCE_SETTINGS","SETTINGS","AngularFirestore","nameOrConfig","shouldEnablePersistence","settings","platformId","zone","persistenceSettings","firestore","runOutsideAngular","app","enablePersistence","undefined","then","e","persistenceEnabled$","pathOrRef","collectionId","queryGroupFn","collectionGroup","ɵfac","AngularFirestore_Factory","t","ctorParameters","decorators","args","ɵprov","factory","token","providedIn","AngularFirestoreModule","ngModule","providers","provide","useValue","ɵmod","ɵinj","AngularFirestoreModule_Factory","DocumentSnapshotExists","DocumentSnapshotDoesNotExist","QueryDocumentSnapshot","QuerySnapshot","DocumentChange","DocumentChangeAction","Action","Reference","AssociatedReference"],"mappings":"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","file":"default~planing-planing-module~task-detail-task-detail-module~tasks-tasks-module-es5.js","sourcesContent":["import { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport { map, scan, filter, observeOn } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport firebase from '@firebase/app';\nimport { registerFirestore } from '@firebase/firestore';\nimport 'firebase/firestore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T, R\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n    return new Observable((/**\n     * @param {?} subscriber\n     * @return {?}\n     */\n    subscriber => {\n        /** @type {?} */\n        let unsubscribe;\n        if (scheduler != null) {\n            scheduler.schedule((/**\n             * @return {?}\n             */\n            () => {\n                unsubscribe = ref.onSnapshot(subscriber);\n            }));\n        }\n        else {\n            unsubscribe = ref.onSnapshot(subscriber);\n        }\n        return (/**\n         * @return {?}\n         */\n        function () {\n            if (unsubscribe != null) {\n                unsubscribe();\n            }\n        });\n    }));\n}\n/**\n * @template R\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\nfunction fromRef(ref, scheduler) {\n    return _fromRef(ref, scheduler);\n}\n/**\n * @template T\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\nfunction fromDocRef(ref, scheduler) {\n    return fromRef(ref, scheduler)\n        .pipe(map((/**\n     * @param {?} payload\n     * @return {?}\n     */\n    payload => ({ payload, type: 'value' }))));\n}\n/**\n * @template T\n * @param {?} ref\n * @param {?=} scheduler\n * @return {?}\n */\nfunction fromCollectionRef(ref, scheduler) {\n    return fromRef(ref, scheduler).pipe(map((/**\n     * @param {?} payload\n     * @return {?}\n     */\n    payload => ({ payload, type: 'query' }))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @template T\n * @param {?} query\n * @param {?=} scheduler\n * @return {?}\n */\nfunction docChanges(query, scheduler) {\n    return fromCollectionRef(query, scheduler)\n        .pipe(map((/**\n     * @param {?} action\n     * @return {?}\n     */\n    action => action.payload.docChanges()\n        .map((/**\n     * @param {?} change\n     * @return {?}\n     */\n    change => ((/** @type {?} */ ({ type: change.type, payload: change }))))))));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @template T\n * @param {?} query\n * @param {?} events\n * @param {?=} scheduler\n * @return {?}\n */\nfunction sortedChanges(query, events, scheduler) {\n    return fromCollectionRef(query, scheduler)\n        .pipe(map((/**\n     * @param {?} changes\n     * @return {?}\n     */\n    changes => changes.payload.docChanges())), scan((/**\n     * @param {?} current\n     * @param {?} changes\n     * @return {?}\n     */\n    (current, changes) => combineChanges(current, changes, events)), []), map((/**\n     * @param {?} changes\n     * @return {?}\n     */\n    changes => changes.map((/**\n     * @param {?} c\n     * @return {?}\n     */\n    c => ((/** @type {?} */ ({ type: c.type, payload: c }))))))));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @template T\n * @param {?} current\n * @param {?} changes\n * @param {?} events\n * @return {?}\n */\nfunction combineChanges(current, changes, events) {\n    changes.forEach((/**\n     * @param {?} change\n     * @return {?}\n     */\n    change => {\n        // skip unwanted change types\n        if (events.indexOf(change.type) > -1) {\n            current = combineChange(current, change);\n        }\n    }));\n    return current;\n}\n/**\n * Creates a new sorted array from a new change.\n * @template T\n * @param {?} combined\n * @param {?} change\n * @return {?}\n */\nfunction combineChange(combined, change) {\n    switch (change.type) {\n        case 'added':\n            if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n                // Not sure why the duplicates are getting fired\n            }\n            else {\n                combined.splice(change.newIndex, 0, change);\n            }\n            break;\n        case 'modified':\n            if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n                // When an item changes position we first remove it\n                // and then add it's new position\n                if (change.oldIndex !== change.newIndex) {\n                    combined.splice(change.oldIndex, 1);\n                    combined.splice(change.newIndex, 0, change);\n                }\n                else {\n                    combined.splice(change.newIndex, 1, change);\n                }\n            }\n            break;\n        case 'removed':\n            if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n                combined.splice(change.oldIndex, 1);\n            }\n            break;\n    }\n    return combined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?=} events\n * @return {?}\n */\nfunction validateEventsArray(events) {\n    if (!events || (/** @type {?} */ (events)).length === 0) {\n        events = ['added', 'removed', 'modified'];\n    }\n    return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n * @template T\n */\nclass AngularFirestoreCollection {\n    /**\n     * The constructor takes in a CollectionReference and Query to provide wrapper methods\n     * for data operations and data streaming.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query. See the AssociatedRefence type for details\n     * on this implication.\n     * @param {?} ref\n     * @param {?} query\n     * @param {?} afs\n     */\n    constructor(ref, query, afs) {\n        this.ref = ref;\n        this.query = query;\n        this.afs = afs;\n    }\n    /**\n     * Listen to the latest change in the stream. This method returns changes\n     * as they occur and they are not sorted by query order. This allows you to construct\n     * your own data structure.\n     * @param {?=} events\n     * @return {?}\n     */\n    stateChanges(events) {\n        if (!events || events.length === 0) {\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n        }\n        return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map((/**\n         * @param {?} actions\n         * @return {?}\n         */\n        actions => actions.filter((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => events.indexOf(change.type) > -1)))), filter((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        changes => changes.length > 0)), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     * @param {?=} events\n     * @return {?}\n     */\n    auditTrail(events) {\n        return this.stateChanges(events).pipe(scan((/**\n         * @param {?} current\n         * @param {?} action\n         * @return {?}\n         */\n        (current, action) => [...current, ...action]), []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     * @param {?=} events\n     * @return {?}\n     */\n    snapshotChanges(events) {\n        /** @type {?} */\n        const validatedEvents = validateEventsArray(events);\n        /** @type {?} */\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * @template K\n     * @param {?=} options\n     * @return {?}\n     */\n    valueChanges(options = {}) {\n        return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)\n            .pipe(map((/**\n         * @param {?} actions\n         * @return {?}\n         */\n        actions => actions.payload.docs.map((/**\n         * @param {?} a\n         * @return {?}\n         */\n        a => {\n            if (options.idField) {\n                return (/** @type {?} */ (Object.assign(Object.assign({}, (/** @type {?} */ (a.data()))), { [options.idField]: a.id })));\n            }\n            else {\n                return a.data();\n            }\n        })))), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     * @param {?=} options\n     * @return {?}\n     */\n    get(options) {\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n    /**\n     * Add data to a collection reference.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query.\n     * @param {?} data\n     * @return {?}\n     */\n    add(data) {\n        return this.ref.add(data);\n    }\n    /**\n     * Create a reference to a single document in a collection.\n     * @template T\n     * @param {?=} path\n     * @return {?}\n     */\n    doc(path) {\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n    }\n}\nif (false) {\n    /** @type {?} */\n    AngularFirestoreCollection.prototype.ref;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFirestoreCollection.prototype.query;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFirestoreCollection.prototype.afs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n * @template T\n */\nclass AngularFirestoreDocument {\n    /**\n     * The contstuctor takes in a DocumentReference to provide wrapper methods\n     * for data operations, data streaming, and Symbol.observable.\n     * @param {?} ref\n     * @param {?} afs\n     */\n    constructor(ref, afs) {\n        this.ref = ref;\n        this.afs = afs;\n    }\n    /**\n     * Create or overwrite a single document.\n     * @param {?} data\n     * @param {?=} options\n     * @return {?}\n     */\n    set(data, options) {\n        return this.ref.set(data, options);\n    }\n    /**\n     * Update some fields of a document without overwriting the entire document.\n     * @param {?} data\n     * @return {?}\n     */\n    update(data) {\n        return this.ref.update(data);\n    }\n    /**\n     * Delete a document.\n     * @return {?}\n     */\n    delete() {\n        return this.ref.delete();\n    }\n    /**\n     * Create a reference to a sub-collection given a path and an optional query\n     * function.\n     * @template R\n     * @param {?} path\n     * @param {?=} queryFn\n     * @return {?}\n     */\n    collection(path, queryFn) {\n        /** @type {?} */\n        const collectionRef = this.ref.collection(path);\n        const { ref, query } = associateQuery(collectionRef, queryFn);\n        return new AngularFirestoreCollection(ref, query, this.afs);\n    }\n    /**\n     * Listen to snapshot updates from the document.\n     * @return {?}\n     */\n    snapshotChanges() {\n        /** @type {?} */\n        const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n        return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Listen to unwrapped snapshot updates from the document.\n     * @return {?}\n     */\n    valueChanges() {\n        return this.snapshotChanges().pipe(map((/**\n         * @param {?} action\n         * @return {?}\n         */\n        action => {\n            return action.payload.data();\n        })));\n    }\n    /**\n     * Retrieve the document once.\n     * @param {?=} options\n     * @return {?}\n     */\n    get(options) {\n        return from(this.ref.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n}\nif (false) {\n    /** @type {?} */\n    AngularFirestoreDocument.prototype.ref;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFirestoreDocument.prototype.afs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n * @template T\n */\nclass AngularFirestoreCollectionGroup {\n    /**\n     * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n     * for data operations and data streaming.\n     * @param {?} query\n     * @param {?} afs\n     */\n    constructor(query, afs) {\n        this.query = query;\n        this.afs = afs;\n    }\n    /**\n     * Listen to the latest change in the stream. This method returns changes\n     * as they occur and they are not sorted by query order. This allows you to construct\n     * your own data structure.\n     * @param {?=} events\n     * @return {?}\n     */\n    stateChanges(events) {\n        if (!events || events.length === 0) {\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n        }\n        return docChanges(this.query, this.afs.schedulers.outsideAngular)\n            .pipe(map((/**\n         * @param {?} actions\n         * @return {?}\n         */\n        actions => actions.filter((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => events.indexOf(change.type) > -1)))), filter((/**\n         * @param {?} changes\n         * @return {?}\n         */\n        changes => changes.length > 0)), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     * @param {?=} events\n     * @return {?}\n     */\n    auditTrail(events) {\n        return this.stateChanges(events).pipe(scan((/**\n         * @param {?} current\n         * @param {?} action\n         * @return {?}\n         */\n        (current, action) => [...current, ...action]), []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     * @param {?=} events\n     * @return {?}\n     */\n    snapshotChanges(events) {\n        /** @type {?} */\n        const validatedEvents = validateEventsArray(events);\n        /** @type {?} */\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n        return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Listen to all documents in the collection and its possible query as an Observable.\n     * @return {?}\n     */\n    valueChanges() {\n        /** @type {?} */\n        const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n        return fromCollectionRefScheduled$\n            .pipe(map((/**\n         * @param {?} actions\n         * @return {?}\n         */\n        actions => actions.payload.docs.map((/**\n         * @param {?} a\n         * @return {?}\n         */\n        a => a.data())))), this.afs.keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     * @param {?=} options\n     * @return {?}\n     */\n    get(options) {\n        return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFirestoreCollectionGroup.prototype.query;\n    /**\n     * @type {?}\n     * @private\n     */\n    AngularFirestoreCollectionGroup.prototype.afs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n * @type {?}\n */\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\n/** @type {?} */\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\n/** @type {?} */\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param {?} collectionRef - A collection reference to query\n * @param {?=} queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n * @return {?}\n */\nfunction associateQuery(collectionRef, queryFn = (/**\n * @param {?} ref\n * @return {?}\n */\nref => ref)) {\n    /** @type {?} */\n    const query = queryFn(collectionRef);\n    /** @type {?} */\n    const ref = collectionRef;\n    return { query, ref };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '\\@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '\\@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * \\@Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\nclass AngularFirestore {\n    /**\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\n     * don't rely on the main Firebase App instance and we can create named\n     * apps and use multiple apps.\n     * @param {?} options\n     * @param {?} nameOrConfig\n     * @param {?} shouldEnablePersistence\n     * @param {?} settings\n     * @param {?} platformId\n     * @param {?} zone\n     * @param {?} persistenceSettings\n     */\n    constructor(options, nameOrConfig, shouldEnablePersistence, settings, platformId, zone, persistenceSettings) {\n        this.schedulers = new ɵAngularFireSchedulers(zone);\n        this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n        this.firestore = zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n            // INVESTIGATE this seems to be required because in the browser build registerFirestore is an Object?\n            //             seems like we're fighting ngcc. In the server firestore() isn't available, so I have to register\n            //             in the browser registerFirestore is not a function... maybe this is an underlying firebase-js-sdk issue\n            if (registerFirestore) {\n                registerFirestore(firebase);\n            }\n            /** @type {?} */\n            const firestore = app.firestore();\n            if (settings) {\n                firestore.settings(settings);\n            }\n            return firestore;\n        }));\n        if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n            // We need to try/catch here because not all enablePersistence() failures are caught\n            // https://github.com/firebase/firebase-js-sdk/issues/608\n            /** @type {?} */\n            const enablePersistence = (/**\n             * @return {?}\n             */\n            () => {\n                try {\n                    return from(this.firestore.enablePersistence(persistenceSettings || undefined).then((/**\n                     * @return {?}\n                     */\n                    () => true), (/**\n                     * @return {?}\n                     */\n                    () => false)));\n                }\n                catch (e) {\n                    return of(false);\n                }\n            });\n            this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\n        }\n        else {\n            this.persistenceEnabled$ = of(false);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} pathOrRef\n     * @param {?=} queryFn\n     * @return {?}\n     */\n    collection(pathOrRef, queryFn) {\n        /** @type {?} */\n        let collectionRef;\n        if (typeof pathOrRef === 'string') {\n            collectionRef = this.firestore.collection(pathOrRef);\n        }\n        else {\n            collectionRef = pathOrRef;\n        }\n        const { ref, query } = associateQuery(collectionRef, queryFn);\n        return new AngularFirestoreCollection(ref, query, this);\n    }\n    /**\n     * Create a reference to a Firestore Collection Group based on a collectionId\n     * and an optional query function to narrow the result\n     * set.\n     * @template T\n     * @param {?} collectionId\n     * @param {?=} queryGroupFn\n     * @return {?}\n     */\n    collectionGroup(collectionId, queryGroupFn) {\n        /** @type {?} */\n        const queryFn = queryGroupFn || ((/**\n         * @param {?} ref\n         * @return {?}\n         */\n        ref => ref));\n        /** @type {?} */\n        const collectionGroup = this.firestore.collectionGroup(collectionId);\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n    }\n    /**\n     * @template T\n     * @param {?} pathOrRef\n     * @return {?}\n     */\n    doc(pathOrRef) {\n        /** @type {?} */\n        let ref;\n        if (typeof pathOrRef === 'string') {\n            ref = this.firestore.doc(pathOrRef);\n        }\n        else {\n            ref = pathOrRef;\n        }\n        return new AngularFirestoreDocument(ref, this);\n    }\n    /**\n     * Returns a generated Firestore Document Id.\n     * @return {?}\n     */\n    createId() {\n        return this.firestore.collection('_').doc().id;\n    }\n}\nAngularFirestore.ɵfac = function AngularFirestore_Factory(t) { return new (t || AngularFirestore)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(ENABLE_PERSISTENCE, 8), ɵngcc0.ɵɵinject(SETTINGS, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PERSISTENCE_SETTINGS, 8)); };\n/** @nocollapse */\nAngularFirestore.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENABLE_PERSISTENCE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SETTINGS,] }] },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PERSISTENCE_SETTINGS,] }] }\n];\n/** @nocollapse */ AngularFirestore.ɵprov = ɵɵdefineInjectable({ factory: function AngularFirestore_Factory() { return new AngularFirestore(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(ENABLE_PERSISTENCE, 8), ɵɵinject(SETTINGS, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone), ɵɵinject(PERSISTENCE_SETTINGS, 8)); }, token: AngularFirestore, providedIn: \"any\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirestore, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'any'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [FIREBASE_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FIREBASE_APP_NAME]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ENABLE_PERSISTENCE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [SETTINGS]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [PERSISTENCE_SETTINGS]\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    AngularFirestore.prototype.firestore;\n    /** @type {?} */\n    AngularFirestore.prototype.persistenceEnabled$;\n    /** @type {?} */\n    AngularFirestore.prototype.schedulers;\n    /** @type {?} */\n    AngularFirestore.prototype.keepUnstableUntilFirst;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AngularFirestoreModule {\n    /**\n     * Attempt to enable persistent storage, if possible\n     * @param {?=} persistenceSettings\n     * @return {?}\n     */\n    static enablePersistence(persistenceSettings) {\n        return {\n            ngModule: AngularFirestoreModule,\n            providers: [\n                { provide: ENABLE_PERSISTENCE, useValue: true },\n                { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\n            ]\n        };\n    }\n}\nAngularFirestoreModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularFirestoreModule });\nAngularFirestoreModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularFirestoreModule_Factory(t) { return new (t || AngularFirestoreModule)(); }, providers: [AngularFirestore] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularFirestoreModule, [{\n        type: NgModule,\n        args: [{\n                providers: [AngularFirestore]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction DocumentSnapshotExists() { }\nif (false) {\n    /** @type {?} */\n    DocumentSnapshotExists.prototype.exists;\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    DocumentSnapshotExists.prototype.data = function (options) { };\n}\n/**\n * @record\n */\nfunction DocumentSnapshotDoesNotExist() { }\nif (false) {\n    /** @type {?} */\n    DocumentSnapshotDoesNotExist.prototype.exists;\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    DocumentSnapshotDoesNotExist.prototype.data = function (options) { };\n    /**\n     * @param {?} fieldPath\n     * @param {?=} options\n     * @return {?}\n     */\n    DocumentSnapshotDoesNotExist.prototype.get = function (fieldPath, options) { };\n}\n/**\n * @record\n * @template T\n */\nfunction QueryDocumentSnapshot() { }\nif (false) {\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    QueryDocumentSnapshot.prototype.data = function (options) { };\n}\n/**\n * @record\n * @template T\n */\nfunction QuerySnapshot() { }\nif (false) {\n    /** @type {?} */\n    QuerySnapshot.prototype.docs;\n}\n/**\n * @record\n * @template T\n */\nfunction DocumentChange() { }\nif (false) {\n    /** @type {?} */\n    DocumentChange.prototype.doc;\n}\n/**\n * @record\n * @template T\n */\nfunction DocumentChangeAction() { }\nif (false) {\n    /** @type {?} */\n    DocumentChangeAction.prototype.type;\n    /** @type {?} */\n    DocumentChangeAction.prototype.payload;\n}\n/**\n * @record\n * @template T\n */\nfunction Action() { }\nif (false) {\n    /** @type {?} */\n    Action.prototype.type;\n    /** @type {?} */\n    Action.prototype.payload;\n}\n;\n/**\n * @record\n * @template T\n */\nfunction Reference() { }\nif (false) {\n    /** @type {?} */\n    Reference.prototype.onSnapshot;\n}\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n * @record\n */\nfunction AssociatedReference() { }\nif (false) {\n    /** @type {?} */\n    AssociatedReference.prototype.ref;\n    /** @type {?} */\n    AssociatedReference.prototype.query;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\n\n//# sourceMappingURL=angular-fire-firestore.js.map"]}